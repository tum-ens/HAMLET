Analyzer API
===========

The Analyzer API provides classes and functions for processing, visualizing, and extracting insights from simulation results generated by the Executor module.

Module Overview
--------------

The Analyzer module is responsible for:

- Loading simulation results from the Executor
- Processing and aggregating data
- Generating visualizations and plots
- Calculating key performance indicators (KPIs)
- Comparing results across different scenarios
- Exporting results in various formats

Key Classes
----------

ScenarioAnalyzer
~~~~~~~~~~~~~~~

.. code-block:: python

    from hamlet.analyzer import ScenarioAnalyzer

    analyzer = ScenarioAnalyzer(path_results="./results/example_scenario")
    analyzer.plot_virtual_feeder_flow()

The ``ScenarioAnalyzer`` class is the main entry point for analyzing simulation results. It loads result data and provides methods for visualization and analysis.

**Key Methods**:

- ``load_results()``: Loads simulation results from disk
- ``plot_virtual_feeder_flow()``: Plots energy flows in the virtual feeder
- ``calculate_kpis()``: Calculates key performance indicators
- ``export_results(format)``: Exports results in various formats (CSV, Excel, etc.)

Data Processing
~~~~~~~~~~~~~

The Analyzer module includes data processing classes:

- ``DataProcessorBase``: Base class for data processors
- ``AgentDataProcessor``: Processes agent-specific data
- ``MarketDataProcessor``: Processes market-specific data
- ``GridDataProcessor``: Processes grid-specific data

Visualization
~~~~~~~~~~~

Visualization components include:

- ``PlotterBase``: Base class for plotting functionality
- ``AgentPlotter``: Creates agent-specific visualizations
- ``MarketPlotter``: Creates market-specific visualizations
- ``GridPlotter``: Creates grid-specific visualizations

Complexity Analysis
~~~~~~~~~~~~~~~~

The ``complexity`` module provides tools for analyzing the computational complexity of simulations:

- ``calculate_complexity()``: Calculates the computational complexity of a scenario
- ``compare_complexity()``: Compares the complexity of different scenarios
- ``plot_complexity_metrics()``: Visualizes complexity metrics

Example Usage
------------

Basic Analysis
~~~~~~~~~~~~

.. code-block:: python

    from hamlet.analyzer import ScenarioAnalyzer

    # Initialize the Analyzer with a results path
    analyzer = ScenarioAnalyzer(path_results="./results/example_scenario")
    
    # Generate basic visualizations
    analyzer.plot_virtual_feeder_flow()
    analyzer.plot_market_prices()
    analyzer.plot_agent_energy_balance()

Calculating Key Performance Indicators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    from hamlet.analyzer import ScenarioAnalyzer

    # Initialize the Analyzer
    analyzer = ScenarioAnalyzer(path_results="./results/example_scenario")
    
    # Calculate KPIs
    kpis = analyzer.calculate_kpis()
    
    # Print KPI summary
    print(kpis.summary())
    
    # Export KPIs to CSV
    kpis.to_csv("./kpi_results.csv")

Comparing Multiple Scenarios
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    from hamlet.analyzer import ScenarioComparator

    # Initialize the Comparator with multiple scenario results
    comparator = ScenarioComparator([
        "./results/scenario_1",
        "./results/scenario_2",
        "./results/scenario_3"
    ])
    
    # Compare market prices across scenarios
    comparator.compare_market_prices()
    
    # Compare agent performance across scenarios
    comparator.compare_agent_performance("consumer1")
    
    # Generate comparison report
    comparator.generate_report("./comparison_report.html")

Extending the Analyzer
--------------------

Users can extend the Analyzer functionality by:

1. Creating custom data processors for specialized analysis
2. Implementing new visualization methods
3. Defining additional KPIs for specific research questions
4. Developing custom export formats for integration with other tools

For more detailed information on specific classes and methods, refer to the API reference documentation.