import os
import matplotlib.pyplot as plt


class PlotterBase:
    def __init__(self, path: dict, config: dict, data: dict, name_subdirectory: str):
        # Configuration dictionary
        self.config = config

        # Processed results data
        self.data = data

        # Plotted figures
        self.figures = {}

        # subdirectory name
        self.name_subdirectory = name_subdirectory

        # Combine normal path and subdirectory path
        self.path = {}
        for path_key, value in path.items():
            self.path[path_key] = os.path.join(value, self.name_subdirectory)

    def plot_all(self, **kwargs):
        """Plot all relevant results data."""
        # get all plot data functions, function has to start with 'plot_' to be included
        plot_functions = [func for func in dir(self) if callable(getattr(self, func)) and func.startswith('plot_') and
                          func != 'plot_all']

        # iterate through all functions and plot results
        for func in plot_functions:
            getattr(self, func)(**kwargs)

    @staticmethod
    def decorator_plot_function(func):
        """
        Decorator to process and save plot figures generated by a function.

        Args:
            func (callable): The plotting function to decorate.

        Returns:
            callable: A wrapped function that processes and optionally saves the plot figures.
        """

        def func_wrapper(*args, **kwargs):
            result_figs = func(*args, **kwargs)  # Execute the function and get figures
            save_path = kwargs.get('save_path')

            if save_path:
                os.makedirs(save_path, exist_ok=True)  # Ensure save path exists

                if isinstance(result_figs, dict):
                    for name, fig in result_figs.items():
                        save_method = "savefig" if hasattr(fig, "savefig") else "write_image"
                        getattr(fig, save_method)(
                            os.path.join(save_path, f"{name}_{func.__name__.replace('plot_', '')}.pdf"))
                else:
                    save_method = "savefig" if hasattr(result_figs, "savefig") else "write_image"
                    getattr(result_figs, save_method)(
                        os.path.join(save_path, f"{func.__name__.replace('plot_', '')}.pdf"))

            plt.show()

        return func_wrapper
